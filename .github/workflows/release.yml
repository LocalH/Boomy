name: Release

on:
    push:
        tags:
            - 'v*' # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
    build:
        strategy:
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]
                include:
                    - os: windows-latest
                      platform: win32
                      arch: x64
                      dotnet-runtime: win-x64
                    - os: macos-latest
                      platform: darwin
                      arch: x64
                      dotnet-runtime: osx-x64
                    - os: ubuntu-latest
                      platform: linux
                      arch: x64
                      dotnet-runtime: linux-x64

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '8.0.x'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: 'BoomyEditor/package-lock.json'

            - name: Restore .NET dependencies
              run: dotnet restore Boomy.sln

            - name: Build .NET solution
              run: dotnet build Boomy.sln -c Release --no-restore

            - name: Install Node.js dependencies
              working-directory: BoomyEditor
              run: npm ci

            - name: Build Electron app
              working-directory: BoomyEditor
              run: npm run make

            - name: Extract version from tag
              id: version
              shell: bash
              run: |
                  tag="${{ github.ref }}"
                  version=${tag#refs/tags/v}
                  echo "version=$version" >> $GITHUB_OUTPUT
                  echo "tag=$tag" >> $GITHUB_OUTPUT

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: boomy-${{ matrix.platform }}-${{ matrix.arch }}
                  path: |
                      BoomyEditor/out/**/*

    release:
        needs: build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract version from tag
              id: version
              shell: bash
              run: |
                  tag="${{ github.ref }}"
                  version=${tag#refs/tags/v}
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ steps.version.outputs.version }}
                  draft: false
                  prerelease: false
                  body: |
                      ## Boomy Release ${{ steps.version.outputs.version }}
                      This release was automatically generated from tag ${{ github.ref_name }}.

            - name: Upload all release assets
              shell: bash
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
                  VERSION: ${{ steps.version.outputs.version }}
              run: |
                  # Function to upload a file
                  upload_file() {
                    local file_path="$1"
                    local asset_name="$2"
                    local content_type="$3"
                    
                    echo "Uploading $asset_name from $file_path"
                    
                    # Construct upload URL
                    upload_url="${UPLOAD_URL%\{*}?name=${asset_name}"
                    
                    curl -X POST \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: $content_type" \
                      --data-binary @"$file_path" \
                      "$upload_url" || echo "Failed to upload $asset_name"
                  }

                  # Upload Electron installers only
                  for installer in artifacts/*/BoomyEditor/out/**/*.{exe,msi,dmg,AppImage,deb,rpm}; do
                    if [[ -f "$installer" ]]; then
                      filename=$(basename "$installer")
                      platform_dir=$(echo "$installer" | cut -d'/' -f2)
                      
                      # Extract platform from artifact name
                      if [[ "$platform_dir" == *"win32"* ]]; then
                        platform="win32"
                      elif [[ "$platform_dir" == *"darwin"* ]]; then
                        platform="darwin"
                      elif [[ "$platform_dir" == *"linux"* ]]; then
                        platform="linux"
                      else
                        platform="unknown"
                      fi
                      
                      asset_name="BoomyEditor-${VERSION}-${platform}-${filename}"
                      
                      # Determine content type
                      case "${filename##*.}" in
                        exe) content_type="application/vnd.microsoft.portable-executable" ;;
                        msi) content_type="application/x-msi" ;;
                        dmg) content_type="application/x-apple-diskimage" ;;
                        AppImage) content_type="application/x-executable" ;;
                        deb) content_type="application/vnd.debian.binary-package" ;;
                        rpm) content_type="application/x-rpm" ;;
                        *) content_type="application/octet-stream" ;;
                      esac
                      
                      upload_file "$installer" "$asset_name" "$content_type"
                    fi
                  done
