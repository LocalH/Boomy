name: Build and Upload All Platforms

on:
    workflow_dispatch:
    push:
        tags:
            - 'v*'

jobs:
    build-windows:
        runs-on: windows-latest
        continue-on-error: true
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '8.0.x'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: 'BoomyEditor/package-lock.json'

            - name: Restore .NET dependencies
              run: dotnet restore Boomy.sln

            - name: Build .NET solution
              run: dotnet build Boomy.sln -c Release --no-restore

            - name: Publish BoomyBuilder (win-x64)
              run: dotnet publish BoomyBuilder/BoomyBuilder.csproj -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true /p:PublishTrimmed=false

            - name: Install Node.js dependencies
              working-directory: BoomyEditor
              run: npm ci

            - name: Build Electron app
              working-directory: BoomyEditor
              run: npm run make

            - name: Upload Electron build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: boomy-win32-x64
                  path: |
                      BoomyEditor/out/**/*.exe

            - name: Upload BoomyExporter artifact
              uses: actions/upload-artifact@v4
              with:
                  name: boomyexporter-win-x64
                  path: |
                      BoomyExporter/bin/Release/net8.0/win-x64/publish/**/*.zip
    build-linux:
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '8.0.x'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: 'BoomyEditor/package-lock.json'

            - name: Restore .NET dependencies
              run: dotnet restore Boomy.sln

            - name: Build .NET solution
              run: dotnet build Boomy.sln -c Release --no-restore

            - name: Publish BoomyBuilder (linux-x64)
              run: dotnet publish BoomyBuilder/BoomyBuilder.csproj -c Release -r linux-x64 --self-contained true /p:PublishSingleFile=true /p:PublishTrimmed=false

            - name: Install Node.js dependencies
              working-directory: BoomyEditor
              run: npm ci

            - name: Build Electron app
              working-directory: BoomyEditor
              run: npm run make

            - name: Upload Electron build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: boomy-linux-x64
                  path: |
                      BoomyEditor/out/**/*.deb
                      BoomyEditor/out/**/*.rpm

            - name: Upload BoomyExporter artifact
              uses: actions/upload-artifact@v4
              with:
                  name: boomyexporter-linux-x64
                  path: |
                      BoomyExporter/bin/Release/net8.0/linux-x64/publish/**/*.zip
    build-macos:
        runs-on: macos-latest
        continue-on-error: true
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '8.0.x'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: 'BoomyEditor/package-lock.json'

            - name: Restore .NET dependencies
              run: dotnet restore Boomy.sln

            - name: Build .NET solution
              run: dotnet build Boomy.sln -c Release --no-restore

            - name: Publish BoomyBuilder (osx-x64)
              run: dotnet publish BoomyBuilder/BoomyBuilder.csproj -c Release -r osx-x64 --self-contained true /p:PublishSingleFile=true /p:PublishTrimmed=false

            - name: Install Node.js dependencies
              working-directory: BoomyEditor
              run: npm ci

            - name: Build Electron app
              working-directory: BoomyEditor
              run: npm run make

            - name: Upload Electron build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: boomy-darwin-x64
                  path: |
                      BoomyEditor/out/**/*.zip

            - name: Upload BoomyExporter artifact
              uses: actions/upload-artifact@v4
              with:
                  name: boomyexporter-osx-x64
                  path: |
                      BoomyExporter/bin/Release/net8.0/osx-x64/publish/**/*.zip
    release:
        needs: [build-windows, build-linux, build-macos]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            - name: Extract version from tag
              id: version
              shell: bash
              run: |
                  tag="${{ github.ref }}"
                  version=${tag#refs/tags/v}
                  echo "version=$version" >> $GITHUB_OUTPUT
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ steps.version.outputs.version }}
                  draft: false
                  prerelease: false
                  body: |
                      ## Boomy Release ${{ steps.version.outputs.version }}
                      This release was automatically generated from tag ${{ github.ref_name }}.
            - name: Upload all release assets
              shell: bash
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
                  VERSION: ${{ steps.version.outputs.version }}
              run: |
                  upload_file() {
                    local file_path="$1"
                    local asset_name="$2"
                    local content_type="$3"
                    upload_url="${UPLOAD_URL%\{*}?name=${asset_name}"
                    echo "Uploading $asset_name from $file_path"
                    curl -X POST \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: $content_type" \
                      --data-binary @"$file_path" \
                      "$upload_url" || echo "Failed to upload $asset_name"
                  }
                  for artifact in artifacts/*/*; do
                    if [[ -f "$artifact" ]]; then
                      filename=$(basename "$artifact")
                      ext="${filename##*.}"
                      # Only upload .deb, .rpm, .exe, and .zip (on macOS) files
                      case "$ext" in
                        exe)
                          content_type="application/vnd.microsoft.portable-executable"
                          upload_file "$artifact" "$filename" "$content_type"
                          ;;
                        deb)
                          content_type="application/vnd.debian.binary-package"
                          upload_file "$artifact" "$filename" "$content_type"
                          ;;
                        rpm)
                          content_type="application/x-rpm"
                          upload_file "$artifact" "$filename" "$content_type"
                          ;;
                        zip)
                          # Only upload .zip if running on macOS
                          if [[ "$(uname)" == "Darwin" ]]; then
                            content_type="application/zip"
                            upload_file "$artifact" "$filename" "$content_type"
                          fi
                          ;;
                        *)
                          # Skip all other file types
                          ;;
                      esac
                    fi
                  done
